{"slots": {"0": {"name": "slot1", "type": {"events": [], "methods": []}}, "1": {"name": "slot2", "type": {"events": [], "methods": []}}, "2": {"name": "slot3", "type": {"events": [], "methods": []}}, "3": {"name": "slot4", "type": {"events": [], "methods": []}}, "4": {"name": "slot5", "type": {"events": [], "methods": []}}, "5": {"name": "slot6", "type": {"events": [], "methods": []}}, "6": {"name": "slot7", "type": {"events": [], "methods": []}}, "7": {"name": "slot8", "type": {"events": [], "methods": []}}, "8": {"name": "slot9", "type": {"events": [], "methods": []}}, "9": {"name": "slot10", "type": {"events": [], "methods": []}}, "-1": {"name": "unit", "type": {"events": [], "methods": []}}, "-3": {"name": "player", "type": {"events": [], "methods": []}}, "-2": {"name": "construct", "type": {"events": [], "methods": []}}, "-4": {"name": "system", "type": {"events": [], "methods": []}}, "-5": {"name": "library", "type": {"events": [], "methods": []}}}, "handlers": [{"code": "unit.hideWidget()\n\nlocal schematicId = 0 --export (Default: 0) 0 means don't set schematic\n\nlocal stopFirst = false --export Whether or not to stop before starting (reapply skills)\nlocal debugMe = false --export (Default: 0) Prints out debug data\nlocal industryUnits = {}\nlocal maintainLevel = 1000 --export (Default: 0) -1 = runn forever anything greater then 0 is a maintain\n\nfunction debugOutput(message) if(debugMe) then system.print(message) end end\n\nfunction configure()\n    configureSlot(slot1)\n    configureSlot(slot2)\n    configureSlot(slot3)\n    configureSlot(slot4)\n    configureSlot(slot5)\n    configureSlot(slot6)\n    configureSlot(slot7)\n    configureSlot(slot8)\n    configureSlot(slot9)\n    configureSlot(slot10)\n\n    debugOutput(\"Found \" .. #industryUnits .. \" Industries\")\n\n    if (industryUnits[1] ~= nil) then\n        -- we have atleast a industry Unit , databank and screen \n        return true\n    end\n\n    debugOutput(\"Can't find any industry units!\")\n    return false\nend\n\n\nfunction configureSlot(slot)\n    if (slot == nil) then\n        -- break empty slot\n        return\n    end\n\n    if(isIndustry(slot)) then\n        -- found a industry unit\n        local counter = #industryUnits\n        debugOutput(\"Assigning Industry \" .. counter)\n        table.insert(industryUnits, slot)\n        return\n    end\nend\n\nfunction setMaintain()    \n    if (industryUnits[1] ~= nil) then\n        debugOutput(\"Starting setMaintain!\")\n        for i, industryUnit in pairs(industryUnits) do\n            local x = 0\n            local status = industryUnit.getState()\n\n            debugOutput(\"Unit \"..i..\": \"..status)\n            if(stopFirst) then\n                industryUnit.stop(true, false)\n            end\n            \n            if(isStopped(industryUnit)) then\n                -- industry unit is stopped\n                debugOutput(\">> Setting maintain on unit \"..i)\n                startAndSet(industryUnit)\n            else\n                --unsupported status\n                debugOutput(\"Failed to stop industry unit #\"..i..\" : unsupported status [\".. status ..\"]\")\n            end      \n        end        \n        debugOutput(\"Done setMaintain!\")\n    end\nend\n\nfunction isStopped(industry) \n    return (industry.getStatus() == \"STOPPED\")\nend\n\nfunction isSafeToStop(industry)\n    local status = industry.getStatus()\n    return (status == \"RUNNING\" or status ==\"JAMMED_MISSING_INGREDIENT\" or status == \"PENDING\")\nend\n\nfunction startAndSet(industryUnit)\n    if(isIndustry(industryUnit)) then    \n        if(schematicId > 0) then\n            -- set schematic because it was requested.\n            industryUnit.setOutput(schematicId)\n        end\n    \n        if(maintainLevel == -1) then\n            industryUnit.startRun()\n        else\n            industryUnit.startMaintain(maintainLevel)\n        end\n    end\nend\n\nfunction isIndustry(slot)\n    \n    --loop functions checking if its an assembly\n    for k,v in pairs(slot) do \n        --debugOutput(\"Slot Functions[\"..k..\"] \" .. v) \n        if (string.match(k, \"startAndMaintain\")) then\n           return true\n        end\n    end\nend\n\nconfigure()\nsetMaintain()\nunit.exit()\n\n\n\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-4"}, "key": "0"}], "methods": [], "events": []}